
if [ "$(uname)"x == "Darwin"x ]
then
    # use GNU commands in Max OS
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    #export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi

# put useful commands here
export MARKPATH=$HOME/.marks

function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}


function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}

function unmark {
    rm -i "$MARKPATH/$1"
}

function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}


_completemarks() {
    # COMP_WORDS: 命令行中的所有输入单词
    # COMP_CWORD: 光标下输入单词的索引
    local curw=${COMP_WORDS[COMP_CWORD]}
    local wordlist=$(find $MARKPATH -type l -printf "%f\n" 2> /dev/null )

    # compgen -W: 返回以$curw为前缀的words
    # COMPREPLY: 候选的补全结果
    # COMP_WORDBREAKS: 类型为字符串，表示单词之间的分隔符
    # COMP_LINE: 类型为字符串，表示当前的命令行输入
    COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
    return 0
}
 
# jump unmark 使用_completemarks函数来补全
complete -F _completemarks j jump unmark

extract() {
    if [ -f "$1" ]; then
        outputDir=${2:-$(pwd)}
        # 在case语句里，双分号;;类似于break语句，还有特殊的符号： ;&及;;&
        case "$1" in
            # 也可以使用 =~ 来测试正则表达式，不过这个更简单
            *.tar.gz | *.tgz )  tar -zxf "$1" -C $outputDir        ;;
            *.tar.bz2| *.tbz2)  tar -jxf "$1" -C $outputDir        ;;
            *.tar)      tar -xf "$1" -C $outputDir                 ;;
            *.bz2)      (cd $outputDir; bunzip2 "$1";)             ;;
            *.gz)       (cd $outputDir; gunzip "$1";)              ;;
            *.zip)      unzip "$1" -d $outputDir                   ;;
            *.ZIP)      unzip "$1" -d $outputDir                   ;;
            *.Z)        (cd $outputDir; uncompress.real "$1";)     ;;
            #*.pax)      cat "$1" | pax -r                       ;;
            #*.pax.Z)    uncompress "$1" --stdout | pax -r       ;;
            #*.dmg)      hdiutil mount "$1"                      ;;
            *) echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file to extract"
    fi
}


# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}


# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}



# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}



# put you aliases here
# enable color support of ls and also add handy aliases
if type dircolors > /dev/null 2>&1
then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias ll='ls -alFh'
    alias la='ls -A'
    alias l='ls -CF'

    # List only directories
    alias lsd="ls -lF | grep --color=never '^d'"

    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias c='cat'
alias bd='. bd -s'
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias dc="cd ~/Documents"

alias mk="mkdir "

alias j='jump'
alias e='extract'
alias rm='rm -i'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -="cd -"

# re-execute the last history command
alias r="fc -s"
alias sudo='sudo '

alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias ips="ifconfig -a | grep --color=never -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)'" # | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

alias serve='ips; python -m SimpleHTTPServer 8080'
alias sj='python -m json.tool'
type vim > /dev/null 2>&1 && alias v='vim'



function getAliasWordsLength () {
    #local content=$(alias "$1" 2> /dev/null ) || { echo -n $1; exit;}
    local content=$(alias "$1")

    eval content=${content#*=}
    echo -n $content
}

# function used to wrap completion function for alias
function makeCompletionWrapper () {
	local actualCommand="$1"
	local actualCompFunc="$2"
    local aliasCommand="$3"
	local aliasCompFunc="$4"

    local aliasContent=$(getAliasWordsLength $aliasCommand)

    # safe way to convert a string into an array
    # the double quotes are necessary! Preserve the leading and trailing
    # spaces inside the variable 
    eval local aliasWordsArray=("$aliasContent")
    local aliasWordsArrayLength=${#aliasWordsArray[@]}
	local function="
function $aliasCompFunc {
    # alias should be only one word
    ((COMP_CWORD+=$aliasWordsArrayLength - 1))

    # remove the alias, convert into an array
    # pay attention to the difference between * and @ 
    wordsAfterAlias=( \"\${COMP_WORDS[@]:1}\" )

    COMP_WORDS=( ""${aliasWordsArray[@]}"" \"\${wordsAfterAlias[@]:-}\" )
    COMP_LINE=\${COMP_LINE/\"\$1\"/\""${aliasContent}"\"}
    ((COMP_POINT += ${#aliasContent} - \${#1}))

    # load the completion function for actual command
    complete -p \"$actualCommand\" &> /dev/null || _completion_loader \"$actualCommand\"

    # call the actual completion function with proper arguments
    # may not work if the current word started with a quote character
    \"$actualCompFunc\" \"$actualCommand\" \${COMP_WORDS[COMP_CWORD]} \${COMP_WORDS[COMP_CWORD-1]}

    return 0
}"
	eval "$function"
	#echo "$function"
}


# usage of makeCompletionWrapper function
alias p='python'
type ipython > /dev/null 2>&1 && alias p='ipython'
makeCompletionWrapper python _python p _p
complete -F _p p

# alias setting for `git`
alias gp='git push'
makeCompletionWrapper git __git_wrap__git_main gp _gp
complete -o bashdefault -o default -o nospace -F _gp gp

alias gpl='git pull'
makeCompletionWrapper git __git_wrap__git_main gpl _gpl
complete -o bashdefault -o default -o nospace -F _gpl gpl

alias gf='git fetch'
makeCompletionWrapper git __git_wrap__git_main gf _gf
complete -o bashdefault -o default -o nospace -F _gf gf

alias gd='git diff'
makeCompletionWrapper git __git_wrap__git_main gd _gd
complete -o bashdefault -o default -o nospace -F _gd gd

alias gc='git commit'
makeCompletionWrapper git __git_wrap__git_main gc _gc
complete -o bashdefault -o default -o nospace -F _gc gc

alias gs='git status'
makeCompletionWrapper git __git_wrap__git_main gs _gs
complete -o bashdefault -o default -o nospace -F _gs gs

alias gsh='git stash'
makeCompletionWrapper git __git_wrap__git_main gsh _gsh
complete -o bashdefault -o default -o nospace -F _gsh gsh

alias gr='git reset'
makeCompletionWrapper git __git_wrap__git_main gr _gr
complete -o bashdefault -o default -o nospace -F _gr gr

alias gb='git branch'
makeCompletionWrapper git __git_wrap__git_main gb _gb
complete -o bashdefault -o default -o nospace -F _gb gb

alias gch='git checkout'
makeCompletionWrapper git __git_wrap__git_main gch _gch
complete -o bashdefault -o default -o nospace -F _gch gch

alias gl='git log'
makeCompletionWrapper git __git_wrap__git_main gl _gl
complete -o bashdefault -o default -o nospace -F _gl gl

alias ga='git add'
makeCompletionWrapper git __git_wrap__git_main ga _ga
complete -o bashdefault -o default -o nospace -F _ga ga

alias gcl='git clone'
makeCompletionWrapper git __git_wrap__git_main gcl _gcl
complete -o bashdefault -o default -o nospace -F _gcl gcl

# note that the trailing space in the alias value,
# so we can refer to the manual page of an alias, e.g.
#       m pg
alias m='man '
makeCompletionWrapper man _man m _m
complete -F _m m


#  +-------------------+
#  |Python setting     |
#  +-------------------+

# virtualenv
export PROJECT_HOME=~/poleved/python/
mkdir -p ${PROJECT_HOME}
source /usr/local/bin/virtualenvwrapper.sh &> /dev/null


#  +-------------------+
#  |System dependent   |
#  +-------------------+

if [ "$(uname)"x == "Darwin"x ]
then
    if [ -f $(brew --prefix)/share/bash-completion/bash_completion ]
    then
        . $(brew --prefix)/share/bash-completion/bash_completion
    fi

    # Recursively delete `.DS_Store` files
    alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

    # Hide/show all desktop icons (useful when presenting)
    alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
    alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

    # alias setting for `brew`
    alias get='brew install'
    makeCompletionWrapper brew _brew get _get
    complete -o bashdefault -o default -F _get get

    alias drop='brew remove'
    makeCompletionWrapper brew _brew drop _drop
    complete -o bashdefault -o default -F _drop drop

    alias search='brew search'
    makeCompletionWrapper brew _brew search _search
    complete -o bashdefault -o default -F _search search

elif [ "$(uname)"x == "Linux"x ]; then
    # Add an "alert" alias for long running commands.  Use like so:
    #   sleep 10; alert
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

    # alias setting for `apt`
    alias get='sudo apt-get install'
    makeCompletionWrapper sudo _sudo get _get
    complete -F _get get

    alias drop='sudo apt-get remove'
    makeCompletionWrapper sudo _sudo drop _drop
    complete -F _drop drop

    alias search='sudo apt-cache  search'
    makeCompletionWrapper sudo _sudo search _search
    complete -F _search search
fi


# ---------------
# |  OSX        |
# ---------------

# /usr/libexec/java_home 
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home
# export M2_HOME=$localBin/apache-maven-3.2.5
# export HADOOP_HOME=$localBin/hadoop-2.4.1
# export HBASE_HOME=$localBin/hbase-0.96.1.1-hadoop2
# export HIVE_HOME=$localBin/hive-0.13.1



# ---------------
# |  Ubuntu     |
# ---------------

# export JAVA_HOME=$localBin/jdk1.7.0_79
# export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

# export M2_HOME=$localBin/apache-maven-3.2.5
# export HADOOP_HOME=$localBin/hadoop-2.4.1
# export HBASE_HOME=$localBin/hbase-0.96.1.1-hadoop2
# export HIVE_HOME=$localBin/hive-0.13.1

# vim: set filetype=sh:
